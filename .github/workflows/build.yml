name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-jvm:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean verify
      - name: Archive build output
        uses: actions/upload-artifact@v3
        with:
          name: nebula.zip
          path: nebula-cli/nebula.zip

  determine-version:
    runs-on: ubuntu-latest
    steps:
      - name: Determine version
        id: get-version
        run: |
          if [ "${{ github.ref_type }}" == "branch" ]; then
            if [ "${{ github.ref_name }}" == "main" ]; then
              echo "VERSION=next" >> $GITHUB_ENV
            else
              echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
            fi
          elif [ "${{ github.ref_type }}" == "tag" ]; then
            echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
          fi

  build-docker:
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    needs:
      - determine-version
      - build-jvm
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: nebula.zip
          path: nebula-cli/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        working-directory: nebula-cli
        run: |
          docker build -t orbitalhq/nebula:${{ env.VERSION }} .
          docker push orbitalhq/nebula:${{ env.VERSION }}

